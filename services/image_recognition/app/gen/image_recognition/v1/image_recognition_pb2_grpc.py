# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from image_recognition.v1 import image_recognition_pb2 as image__recognition_dot_v1_dot_image__recognition__pb2


class ImageRecognitionServiceStub(object):
    """画像認識サービス
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Hello = channel.unary_unary(
                '/image_recognition.v1.ImageRecognitionService/Hello',
                request_serializer=image__recognition_dot_v1_dot_image__recognition__pb2.HelloRequest.SerializeToString,
                response_deserializer=image__recognition_dot_v1_dot_image__recognition__pb2.HelloReply.FromString,
                _registered_method=True)
        self.RecognizeImage = channel.unary_unary(
                '/image_recognition.v1.ImageRecognitionService/RecognizeImage',
                request_serializer=image__recognition_dot_v1_dot_image__recognition__pb2.RecognizeImageRequest.SerializeToString,
                response_deserializer=image__recognition_dot_v1_dot_image__recognition__pb2.RecognizeImageResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/image_recognition.v1.ImageRecognitionService/HealthCheck',
                request_serializer=image__recognition_dot_v1_dot_image__recognition__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=image__recognition_dot_v1_dot_image__recognition__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class ImageRecognitionServiceServicer(object):
    """画像認識サービス
    """

    def Hello(self, request, context):
        """互換性維持のためのサンプル RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecognizeImage(self, request, context):
        """入力画像の類似度を算出して返す
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """ヘルスチェック
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageRecognitionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Hello': grpc.unary_unary_rpc_method_handler(
                    servicer.Hello,
                    request_deserializer=image__recognition_dot_v1_dot_image__recognition__pb2.HelloRequest.FromString,
                    response_serializer=image__recognition_dot_v1_dot_image__recognition__pb2.HelloReply.SerializeToString,
            ),
            'RecognizeImage': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeImage,
                    request_deserializer=image__recognition_dot_v1_dot_image__recognition__pb2.RecognizeImageRequest.FromString,
                    response_serializer=image__recognition_dot_v1_dot_image__recognition__pb2.RecognizeImageResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=image__recognition_dot_v1_dot_image__recognition__pb2.HealthCheckRequest.FromString,
                    response_serializer=image__recognition_dot_v1_dot_image__recognition__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'image_recognition.v1.ImageRecognitionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('image_recognition.v1.ImageRecognitionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImageRecognitionService(object):
    """画像認識サービス
    """

    @staticmethod
    def Hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/image_recognition.v1.ImageRecognitionService/Hello',
            image__recognition_dot_v1_dot_image__recognition__pb2.HelloRequest.SerializeToString,
            image__recognition_dot_v1_dot_image__recognition__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecognizeImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/image_recognition.v1.ImageRecognitionService/RecognizeImage',
            image__recognition_dot_v1_dot_image__recognition__pb2.RecognizeImageRequest.SerializeToString,
            image__recognition_dot_v1_dot_image__recognition__pb2.RecognizeImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/image_recognition.v1.ImageRecognitionService/HealthCheck',
            image__recognition_dot_v1_dot_image__recognition__pb2.HealthCheckRequest.SerializeToString,
            image__recognition_dot_v1_dot_image__recognition__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
