// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: image_recognition/v1/image_recognition.proto

package image_recognitionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageRecognitionService_Hello_FullMethodName          = "/image_recognition.v1.ImageRecognitionService/Hello"
	ImageRecognitionService_RecognizeImage_FullMethodName = "/image_recognition.v1.ImageRecognitionService/RecognizeImage"
	ImageRecognitionService_HealthCheck_FullMethodName    = "/image_recognition.v1.ImageRecognitionService/HealthCheck"
)

// ImageRecognitionServiceClient is the client API for ImageRecognitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 画像認識サービス
type ImageRecognitionServiceClient interface {
	// 互換性維持のためのサンプル RPC
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 入力画像の類似度を算出して返す
	RecognizeImage(ctx context.Context, in *RecognizeImageRequest, opts ...grpc.CallOption) (*RecognizeImageResponse, error)
	// ヘルスチェック
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type imageRecognitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageRecognitionServiceClient(cc grpc.ClientConnInterface) ImageRecognitionServiceClient {
	return &imageRecognitionServiceClient{cc}
}

func (c *imageRecognitionServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, ImageRecognitionService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRecognitionServiceClient) RecognizeImage(ctx context.Context, in *RecognizeImageRequest, opts ...grpc.CallOption) (*RecognizeImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognizeImageResponse)
	err := c.cc.Invoke(ctx, ImageRecognitionService_RecognizeImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRecognitionServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ImageRecognitionService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageRecognitionServiceServer is the server API for ImageRecognitionService service.
// All implementations must embed UnimplementedImageRecognitionServiceServer
// for forward compatibility.
//
// 画像認識サービス
type ImageRecognitionServiceServer interface {
	// 互換性維持のためのサンプル RPC
	Hello(context.Context, *HelloRequest) (*HelloReply, error)
	// 入力画像の類似度を算出して返す
	RecognizeImage(context.Context, *RecognizeImageRequest) (*RecognizeImageResponse, error)
	// ヘルスチェック
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedImageRecognitionServiceServer()
}

// UnimplementedImageRecognitionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageRecognitionServiceServer struct{}

func (UnimplementedImageRecognitionServiceServer) Hello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedImageRecognitionServiceServer) RecognizeImage(context.Context, *RecognizeImageRequest) (*RecognizeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeImage not implemented")
}
func (UnimplementedImageRecognitionServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedImageRecognitionServiceServer) mustEmbedUnimplementedImageRecognitionServiceServer() {
}
func (UnimplementedImageRecognitionServiceServer) testEmbeddedByValue() {}

// UnsafeImageRecognitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageRecognitionServiceServer will
// result in compilation errors.
type UnsafeImageRecognitionServiceServer interface {
	mustEmbedUnimplementedImageRecognitionServiceServer()
}

func RegisterImageRecognitionServiceServer(s grpc.ServiceRegistrar, srv ImageRecognitionServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageRecognitionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageRecognitionService_ServiceDesc, srv)
}

func _ImageRecognitionService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecognitionServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRecognitionService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecognitionServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRecognitionService_RecognizeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecognitionServiceServer).RecognizeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRecognitionService_RecognizeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecognitionServiceServer).RecognizeImage(ctx, req.(*RecognizeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRecognitionService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecognitionServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRecognitionService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecognitionServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageRecognitionService_ServiceDesc is the grpc.ServiceDesc for ImageRecognitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageRecognitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_recognition.v1.ImageRecognitionService",
	HandlerType: (*ImageRecognitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _ImageRecognitionService_Hello_Handler,
		},
		{
			MethodName: "RecognizeImage",
			Handler:    _ImageRecognitionService_RecognizeImage_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ImageRecognitionService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image_recognition/v1/image_recognition.proto",
}
